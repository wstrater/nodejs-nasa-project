const { MongoClient, Decimal128, ObjectId, ServerApiVersion } = require('mongodb');

const MONGO_URL = process.env.MONGO_URL || 'learnmongodb.whe2o7y.mongodb.net/shop';
const MONGO_USER = process.env.MONGO_USER || 'nasa-api';
const MONGO_PASSWORD = process.env.MONGO_PASSWORD | 'Euxq9YelFFhqNxQH';

const mongoUri = `mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_URL}?retryWrites=true&w=majority`;

let _client;

const fromDecimal = value => {
    if (value) {
        return value.toString();
    } else {
        return value;
    }
}

const fromId = value => {
    if (value) {
        return value.toString();
    } else {
        return value;
    }
}

const getCollection = (name) => {
    return getClient().db().collection(name); 
}

const getClient = () => {
    if (_client) {
        return _client;
    } else {
        throw Error('MongoDB not initialized');
    }
}

const getDB = () => {
    return getClient().db(); 
}

const initDB = callback => {
    if (_client) {
        console.log('MongoDB is already initialized');
        return callback(null, _client);
    }

    MongoClient.connect(mongoUri)
        .then(client => {
            console.log('MongoDB initialized');
            _client = client;
            callback(null, _client);
        }).catch(err => {
            console.error(err);
            callback(err);
        })
}

const toDecimal = value => {
    if (value) {
        return Decimal128.fromString(value.toString())
    } else {
        return value
    }
}

const toId = value => {
    if (value) {
        return new ObjectId(value.toString())
    } else {
        return value
    }
}

module.exports = {
    fromDecimal,
    fromId,
    getClient,
    getCollection,
    getDB,
    initDB,
    toDecimal,
    toId
}


const { MongoClient, ServerApiVersion } = require('mongodb');

var MONGO_URL = 'learnmongodb.whe2o7y.mongodb.net/shop';
var MONGO_USER = 'nasa-api';
var MONGO_PASSWORD = 'Euxq9YelFFhqNxQH';

var MONGO_URI = `mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_URL}?retryWrites=true&w=majority`;
var uri = `mongodb+srv://${MONGO_USER}:${MONGO_PASSWORD}@learnmongodb.whe2o7y.mongodb.net/?retryWrites=true&w=majority`;

// Create a MongoClient with a MongoClientOptions object to set the Stable API version
var client = new MongoClient(MONGO_URI, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function run() {
  try {
    // Connect the client to the server	(optional starting in v4.7)
    await client.connect();

    const admin = client.db("admin");

    // Send a ping to confirm a successful connection
    await admin.command({ ping: 1 });
    console.log("Pinged your deployment. You successfully connected to MongoDB!");

    admin.command({ listDatabases: 1, nameOnly: true}).then(databases => {
            databases.databases.forEach(database => {
                console.log('database', database.name);
                const collections = client.db(database.name).listCollections();
                collections.forEach(collection => {
                    console.log('collection', database.name, collection.name);
                });
            });
        });

    const databases = await admin.command({ listDatabases: 1, nameOnly: true});
    console.log(databases);
    databases.databases.forEach(database => {
        console.log('database', database);
        console.log('database.name', database.name);
        const db = client.db(database.name);
        const collections = db.listCollections().toArray();
        // console.log(collections);
        collections.forEach(collection => {
            console.log('collection', database.name, collection.name);
        });
    });
  } finally {
    // Ensures that the client will close when you finish/error
    await client.close();
  }
}
run().catch(console.dir);



var client = new MongoClient(MONGO_URI, {
       serverApi: {
            version: ServerApiVersion.v1,
            strict: true,
            deprecationErrors: true,
        }
    });

await client.connect();

var admin = client.db('admin')
var databases = await admin.command({ listDatabases: 1 });
databases.databases.forEach(database => {console.log('database:', database.name);});
var databaseNames = databases.databases.map(database => database.name).sort();

var shop = client.db('shop')

var collections = await shop.listCollections().toArray();
collections.forEach(collection => {console.log('collection:', shop.namespace, collection.name);});
var collectionNames = collections.map(collection => collection.name).sort();

shop.listCollections().toArray().then(console.log);
shop.listCollections().toArray().then(collections => {collections.forEach(collection => {console.log('collection:', shop.namespace, collection.name);});});

var cursor = shop.listCollections();
while (await cursor.hasNext()) {const collection = await cursor.next(); console.log(collection);}

var collections = shop.listCollections();
for await (const collection of collections) {console.log(collection);}
